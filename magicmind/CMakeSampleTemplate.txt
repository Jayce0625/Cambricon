# Copyright (C) [2020-2023] The Cambricon Authors. All Rights Reserved.
###############################################################################
# Build Environment
###############################################################################
macro(set_ifndef var val)
  if(NOT ${var})
    set(${var} ${val})
  endif()
  message(STATUS "Configurable variable ${var} set to ${${var}}")
endmacro()
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -pthread -pipe")
set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS} -g3 -O0")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS} -O3")
set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -Wall -Werror -fPIC -std=c++11 -pthread -pipe")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${CMAKE_C_FLAGS} -g3 -O0")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${CMAKE_C_FLAGS} -O3")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -Wl,--gc-sections -fPIC")
if (EXISTS ${ABI})
  add_definitions(-D_GLIBCXX_USE_CXX11_ABI=${ABI})
endif()
message("-- CMAKE_SOURCE_DIR=${CMAKE_SOURCE_DIR}")
###############################################################################
# Neuware Environment
###############################################################################
set(NEUWARE_HOME $ENV{NEUWARE_HOME})
message("-- NEUWARE_HOME=$ENV{NEUWARE_HOME}")
if (EXISTS ${NEUWARE_HOME})
  if (EXISTS ${CMAKE_TOOLCHAIN_FILE})
    message("-- NEUWARE_HOME_EDGE=$ENV{NEUWARE_HOME}/edge")
    include_directories("${NEUWARE_HOME}/edge/include")
    link_directories("${NEUWARE_HOME}/edge/lib64")
    link_directories("${NEUWARE_HOME}/edge/lib")
  endif()
  include_directories("${NEUWARE_HOME}/include")
  link_directories("${NEUWARE_HOME}/lib64")
  link_directories("${NEUWARE_HOME}/lib")
else()
  message(FATAL_ERROR "NEUWARE cannot be found. Refer to README.md to prepare NEUWARE_HOME environment.")
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
  "${NEUWARE_HOME}/cmake"
  "${NEUWARE_HOME}/cmake/modules"
)
message("-- CMAKE_MODULE_PATH=${CMAKE_MODULE_PATH}")
###############################################################################
# BangC Environment
###############################################################################
set_ifndef(BUILD_WITH_BANG OFF)
set_ifndef(CMAKE_BUILD_TYPE release)
if (${BUILD_WITH_BANG})
  string(TOLOWER ${CMAKE_BUILD_TYPE} _CMAKE_BUILD_TYPE_LOWER)
  set(BANG_TARGET_CPU_ARCH ${TARGET_CPU_ARCH})
  message("-- TARGET_CPU_ARCH=${TARGET_CPU_ARCH}")
  set(BANG_TARGET_MLU_ARCH ${TARGET_MLU_ARCH})
  message("-- TARGET_MLU_ARCH=${TARGET_MLU_ARCH}")
  set(TOOLCHAIN_PATH $ENV{TOOLCHAIN_PATH})
  message("-- TOOLCHAIN_PATH=${TOOLCHAIN_PATH}")
  find_package(BANG)
  if (NOT BANG_FOUND)
    message(FATAL_ERROR "BANG cannot be found.")
  else()
    if (NOT BANG_CNCC_EXECUTABLE)
      message(FATAL_ERROR "cncc not found. Please ensure cncc is in your PATH env or set variable BANG_CNCC_EXECUTABLE from cmake. Otherwise you should chech path used by find_program(BANG_CNCC_EXECUTABLE) in FindBANG.cmake")
    endif()
  endif()
  set(BANG_CNCC_FLAGS "-Wall -Werror -fPIC -std=c++11 -pthread --target=${TARGET_CPU_ARCH}")
  if (${_CMAKE_BUILD_TYPE_LOWER} MATCHES "debug")
      set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS} -g3 -O0")
  endif()
  if (${_CMAKE_BUILD_TYPE_LOWER} MATCHES "release")
    set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS} -O3 -DNDBUG")
    set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS} -Xbang-cnas -fno-soft-pipeline")
  endif()
  if (${TARGET_MLU_ARCH} MATCHES "CNFATBIN")
    set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS}" "--bang-mlu-arch=mtp_322"
                                             "--bang-mlu-arch=mtp_372")
  else()
    set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS}" "--bang-mlu-arch=${TARGET_MLU_ARCH}")
  endif()
  set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS}" "--bang-wram-align64")

  if (${TARGET_CPU_ARCH} MATCHES ".*x86_64.*")
    set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS} -mcmodel=large")
  endif()
  if (${TARGET_CPU_ARCH} MATCHES ".*aarch64.*")
    if(EXISTS "${TOOLCHAIN_PATH}/aarch64-linux-gnu/include/c++/6.2.1/")
      set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS} --sysroot ${TOOLCHAIN_PATH}/aarch64-linux-gnu/libc/")
      include_directories("${TOOLCHAIN_PATH}/aarch64-linux-gnu/")
      include_directories("${TOOLCHAIN_PATH}/aarch64-linux-gnu/include/c++/6.2.1/")
      include_directories("${TOOLCHAIN_PATH}/aarch64-linux-gnu/include/c++/6.2.1/aarch64-linux-gnu")
    elseif(EXISTS "${TOOLCHAIN_PATH}/aarch64-buildroot-linux-gnu/include/c++/9.3.0/")
      set(BANG_CNCC_FLAGS "${BANG_CNCC_FLAGS} --sysroot ${TOOLCHAIN_PATH}/aarch64-buildroot-linux-gnu/sysroot/")
      include_directories("${TOOLCHAIN_PATH}/aarch64-buildroot-linux-gnu/")
      include_directories("${TOOLCHAIN_PATH}/aarch64-buildroot-linux-gnu/include/c++/9.3.0/")
      include_directories("${TOOLCHAIN_PATH}/aarch64-buildroot-linux-gnu/include/c++/9.3.0/aarch64-buildroot-linux-gnu")
    endif()
    link_directories("${NEUWARE_HOME}/edge/lib64")
  endif()
endif()
###############################################################################
# Sample Environment
###############################################################################
if(EXISTS "${PROJECT_SOURCE_DIR}/third_party")
  include_directories(".")
  set(third_party_path "${PROJECT_SOURCE_DIR}/third_party")
elseif(EXISTS "${PROJECT_SOURCE_DIR}/../third_party")
  include_directories("..")
  set(third_party_path "${PROJECT_SOURCE_DIR}/../third_party")
elseif(EXISTS "${PROJECT_SOURCE_DIR}/../../third_party")
  include_directories("../..")
  set(third_party_path "${PROJECT_SOURCE_DIR}/../../third_party")
else()
  message(FATAL_ERROR "sample third_party cannot be found.")
endif()
message(STATUS "sample third_party located at ${third_party_path}")
file(GLOB_RECURSE third_party_files ${third_party_path}/*.cc)
add_library(third_party_obj STATIC ${third_party_files})
message(STATUS ${third_party_files})

if(EXISTS "${PROJECT_SOURCE_DIR}/common")
  include_directories(".")
  set(common_path "${PROJECT_SOURCE_DIR}/common")
elseif(EXISTS "${PROJECT_SOURCE_DIR}/../common")
  include_directories("..")
  set(common_path "${PROJECT_SOURCE_DIR}/../common")
elseif(EXISTS "${PROJECT_SOURCE_DIR}/../../common")
  include_directories("../..")
  set(common_path "${PROJECT_SOURCE_DIR}/../../common")
else()
  message(FATAL_ERROR "sample common cannot be found.")
endif()
message(STATUS "sample common located at ${common_path}")

function(add_calib_obj)
  if (NOT EXISTS ${CMAKE_TOOLCHAIN_FILE})
    message("To compile common_obj compiletime part.")
    file(GLOB common_files_compile ${common_path}/calib_data.cc)
    add_library(common_obj_compile STATIC ${common_files_compile})
    target_link_libraries(common_obj_compile magicmind pthread dl)
  endif()
endfunction()

file(GLOB common_files_runtime ${common_path}/*.cc)
list(REMOVE_ITEM common_files_runtime ${common_path}/calib_data.cc)
add_library(common_obj_runtime STATIC ${common_files_runtime})
target_link_libraries(common_obj_runtime third_party_obj cnrt magicmind_runtime cndrv cndev pthread dl cnpapi)
